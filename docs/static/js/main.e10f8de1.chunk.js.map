{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","Layout","Footer","Content","formItemLayout","labelCol","xs","span","sm","wrapperCol","CustomizedForm","onChange","fields","form","layout","onFieldsChange","_","allFields","Item","name","label","rules","required","message","placeholder","value","className","map","i","style","width","formControls","App","Form","useForm","useState","setFields","newFields","offset","icon","ArrowRightOutlined","onClick","console","log","clickMe","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e10f8de1.chunk.js","sourcesContent":["import './App.scss';\n\nimport { Layout, Button, Row, Col, Form, Input, Select, DatePicker, Space } from 'antd';\nimport { Option } from 'antd/lib/mentions';\nimport { ArrowLeftOutlined, ArrowRightOutlined } from '@ant-design/icons';\nimport { useState } from 'react';\n\nconst { Header, Footer, Content } = Layout;\n\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 4,\n    },\n    sm: {\n      span: 4,\n    },\n  },\n  wrapperCol: {\n    xs: {\n      span: 8,\n    },\n    sm: {\n      span: 8,\n    },\n  },\n};\n\ninterface FieldData {\n  name: string | number | (string | number)[];\n  value?: any;\n  touched?: boolean;\n  validating?: boolean;\n  errors?: string[];\n}\n\ninterface CustomizedFormProps {\n  onChange: (fields: FieldData[]) => void;\n  fields: FieldData[];\n  form: any;\n}\n\nconst CustomizedForm: React.FC<CustomizedFormProps> = ({ onChange, fields, form }) => (\n  <Form layout=\"horizontal\" {...formItemLayout} fields={fields}\n    onFieldsChange={(_, allFields) => {\n      onChange(allFields);\n    }} form={form}>\n    <Form.Item name='title' label=\"Title\" rules={[{ required: true, message: 'Username is required!' }]}>\n      <Select placeholder=\"Please Select...\">\n        <Option value=\"Mr.\">Mr.</Option>\n        <Option value=\"Mrs.\">Mrs.</Option>\n      </Select>\n    </Form.Item>\n    <Form.Item name='firstName' label=\"First Name\" rules={[{ required: true, message: 'Username is required!' }]}>\n      <Input placeholder=\"First Name\" />\n      {\n        false && <span className=\"ant-form-text\">First Name</span>\n      }\n    </Form.Item>\n    <Form.Item name='lastName' label=\"Last Name\" rules={[{ required: true, message: 'Username is required!' }]}>\n      <Input placeholder=\"Last Name\" />\n      {\n        false && <span className=\"ant-form-text\">Last Name</span>\n      }\n    </Form.Item>\n    <Form.Item name='mobileNumber' label=\"Mobile Number\" className='mobile' rules={[{ required: true, message: 'Username is required!' }]}>\n      <Input placeholder=\"Mobile Number\" />\n      {\n        false && <span className=\"ant-form-text\">Mobile Number</span>\n      }\n    </Form.Item>\n    <span className=\"ant-form-text\">or</span>\n    <Form.Item name='emailAddress' label=\"Email Address\" rules={[{ required: true, message: 'Username is required!' }]}>\n      <Input placeholder=\"Email Address\" />\n      {\n        false && <span className=\"ant-form-text\">Email Address</span>\n      }\n    </Form.Item>\n    <Form.Item name='collectionBranch' label=\"Collection Branch\" rules={[{ required: true, message: 'Username is required!' }]}>\n      <Select placeholder=\"Please Select...\">\n        {['1', '2', '3', '4', '5', '6', '7', '8'].map((i) => <Option value={i} >Branch {i}</Option>)}\n      </Select>\n    </Form.Item>\n    <Form.Item name='collectionDate' label=\"Collection Date\" rules={[{ required: true, message: 'Username is required!' }]}>\n      <DatePicker\n        style={{\n          width: '100%',\n        }}\n      />\n    </Form.Item>\n    <Form.Item name='collectionTimeslot' label=\"Collection Timeslot\" rules={[{ required: true, message: 'Username is required!' }]}>\n      <Select placeholder=\"Please Select...\">\n        <Option value=\"10-11\">10.00 AM - 11.00 AM</Option>\n        <Option value=\"11-12\">11.00 AM - 12.00 PM</Option>\n        <Option value=\"12-13\">12.00 PM - 01.00 PM</Option>\n        <Option value=\"14-15\">02.00 PM - 03.00 PM</Option>\n        <Option value=\"15-16\">03.00 PM - 04.00 PM</Option>\n        <Option value=\"16-17\">04.00 PM - 05.00 PM</Option>\n        <Option value=\"17-18\">05.00 PM - 06.00 PM</Option>\n        <Option value=\"18-19\">06.00 PM - 07.00 PM</Option>\n        <Option value=\"19-20\">07.00 PM - 08.00 PM</Option>\n      </Select>\n    </Form.Item>\n    <Form.Item label=\"Quantity\">\n      <span className=\"ant-form-text\">1</span>\n    </Form.Item>\n  </Form>\n);\n\nconst formControls = [\n  { name: 'title', value: null, required: true },\n  { name: 'firstName', value: null, required: true },\n  { name: 'lastName', value: null, required: true },\n  { name: 'mobileNumber', value: null, required: true },\n  { name: 'emailAddress', value: null, required: true },\n  { name: 'collectionBranch', value: null, required: true },\n  { name: 'collectionDate', value: null, required: true },\n  { name: 'collectionTimeslot', value: null, required: true }\n]\n\nfunction clickMe(fields: any) {\n  console.log(fields);\n}\n\nfunction App() {\n  const [form] = Form.useForm();\n  const [fields, setFields] = useState<FieldData[]>(formControls);\n  return (\n    <Layout>\n      <Header>\n        <div className='header'>Chinese New Year Banknotes Booking</div>\n        <div>Please fill in the below ordering form to complete the registration</div>\n      </Header>\n      <Content>\n        <div className='important-notes'>\n          <div className=\"title\">Important Notes</div>\n          <ol>\n            <li>Each client can only submit one pre-order application</li>\n            <li>xxx xxx xxx</li>\n            <li>xxx xxx xxx</li>\n          </ol>\n        </div>\n        <div className='form'>\n          <div className=\"title\">Order Details</div>\n          <CustomizedForm\n            form={form}\n            fields={fields}\n            onChange={newFields => {\n              setFields(newFields);\n            }}\n          />\n        </div>\n      </Content>\n      <Footer>\n        <Row className='footer-row'>\n          <Col span={4} offset={20}>\n            <Row>\n              <Space>\n                {\n                  false && <Button style={{ width: '100%' }} danger icon={<ArrowLeftOutlined />} onClick={() => clickMe(fields)}>Back</Button>\n                }\n                <Button style={{ width: '100%' }} icon={<ArrowRightOutlined />} onClick={() => clickMe(fields)}>Submit</Button>\n              </Space>\n            </Row>\n          </Col>\n        </Row>\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom'; \n\nReactDOM.render(\n  <HashRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}